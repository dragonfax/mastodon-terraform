version: '3'
services:

  nginx:
    image: nginx:1.22.1
    restart: always
    depends_on:
      - web
    networks:
      - external_network
      - internal_network
    volumes:
      - type: bind
        source: /opt/nginx.mastodon.conf
        target: /etc/nginx/conf.d/default.conf
        read_only: true
      - type: bind
        source: /opt/data/letsencrypt/live/${domain}/fullchain.pem
        target: /etc/letsencrypt/live/${domain}/fullchain.pem
        read_only: true
      - type: bind
        source: /opt/data/letsencrypt/live/${domain}/privkey.pem
        target: /etc/letsencrypt/live/${domain}/privkey.pem
        read_only: true
      - type: volume
        source: public
        target: /home/mastodon/live/public
        volume:
          nocopy: true
        read_only: true
    ports:
      - '0.0.0.0:80:80'
      - '0.0.0.0:443:443'

  db:
    restart: always
    image: postgres:14-alpine
    shm_size: 256mb
    networks:
      - internal_network
      - external_network # for pings
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
    volumes:
      - /opt/data/postgres:/var/lib/postgresql/data
    environment:
      - 'POSTGRES_HOST_AUTH_METHOD=trust'
      - 'POSTGRES_PASSWORD=mastodon'
      - 'POSTGRES_USER=mastodon'
      - 'POSTGRES_DB=mastodon_prod'
    ports:
      - '127.0.0.1:5432:5432'

  redis:
    restart: always
    image: redis:7-alpine
    networks:
      - internal_network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
    volumes:
      - /opt/data/redis:/data
    expose:
      - '6379'

  es:
    restart: always
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.4
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m -Des.enforce.bootstrap.checks=true"
      - "xpack.license.self_generated.type=basic"
      - "xpack.security.enabled=false"
      - "xpack.watcher.enabled=false"
      - "xpack.graph.enabled=false"
      - "xpack.ml.enabled=false"
      - "bootstrap.memory_lock=true"
      - "cluster.name=es-mastodon"
      - "discovery.type=single-node"
      - "thread_pool.write.queue_size=1000"
    networks:
       - internal_network
    healthcheck:
       test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
    volumes:
       - /opt/data/elasticsearch:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    expose:
      - '9200'
      - '9300'

  web:
    image: tootsuite/mastodon:v4.0
    restart: always
    env_file: .env.production
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000"
    networks:
      - external_network
      - internal_network
    healthcheck:
      # prettier-ignore
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:3000/health || exit 1']
    depends_on:
      - db
      - redis
      - es
      - streaming
      - sidekiq
    volumes:
      - type: bind
        source: /opt/.env.production
        target: /opt/mastodon/.env.production
      - type: volume
        source: public
        target: /opt/mastodon/public


  streaming:
    image: tootsuite/mastodon:v4.0
    restart: always
    env_file: .env.production
    command: node ./streaming
    networks:
      - external_network
      - internal_network
    healthcheck:
      # prettier-ignore
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1']
    volumes:
      - type: bind
        source: /opt/.env.production
        target: /opt/mastodon/.env.production
    depends_on:
      - db
      - redis

  sidekiq:
    image: tootsuite/mastodon:v4.0
    restart: always
    env_file: .env.production
    command: bundle exec sidekiq
    depends_on:
      - db
      - redis
    networks:
      - external_network
      - internal_network
    volumes:
      - type: bind
        source: /opt/.env.production
        target: /opt/mastodon/.env.production
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep '[s]idekiq\ 6' || false"]

networks:
  external_network:
  internal_network:
    internal: true

volumes:
  public: